version: '3.8'

services:
  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: file-processing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - file-processing-network

  # Main web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: file-processing-web
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - file-processing-network
    restart: unless-stopped

  # CLI service for batch processing
  cli:
    build:
      context: .
      dockerfile: Dockerfile.cli
    container_name: file-processing-cli
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./temp:/app/temp
    environment:
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - file-processing-network
    profiles:
      - cli

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: file-processing-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - file-processing-network
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: file-processing-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - file-processing-network
    profiles:
      - monitoring

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  file-processing-network:
    driver: bridge