apiVersion: apps/v1
kind: Deployment
metadata:
  name: file-processing-web
  namespace: file-processing
  labels:
    app.kubernetes.io/name: file-processing-web
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: file-processing-system
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: file-processing-web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: file-processing-web
        app.kubernetes.io/component: web
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: web
        image: file-processing:latest
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: FLASK_ENV
          valueFrom:
            configMapKeyRef:
              name: file-processing-config
              key: FLASK_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: file-processing-config
              key: LOG_LEVEL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: file-processing-config
              key: REDIS_URL
        - name: MAX_UPLOAD_SIZE
          valueFrom:
            configMapKeyRef:
              name: file-processing-config
              key: MAX_UPLOAD_SIZE
        - name: WORKER_PROCESSES
          valueFrom:
            configMapKeyRef:
              name: file-processing-config
              key: WORKER_PROCESSES
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: uploads-volume
          mountPath: /app/uploads
        - name: logs-volume
          mountPath: /app/logs
        - name: temp-volume
          mountPath: /app/temp
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: data-pvc
      - name: uploads-volume
        persistentVolumeClaim:
          claimName: uploads-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: logs-pvc
      - name: temp-volume
        emptyDir:
          sizeLimit: 1Gi
      imagePullPolicy: Always
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: file-processing-web-service
  namespace: file-processing
  labels:
    app.kubernetes.io/name: file-processing-web
    app.kubernetes.io/component: web
spec:
  selector:
    app.kubernetes.io/name: file-processing-web
  ports:
  - port: 80
    targetPort: 5000
    name: http
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: file-processing
  labels:
    app.kubernetes.io/name: file-processing-web
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: file-processing
  labels:
    app.kubernetes.io/name: file-processing-web
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: file-processing
  labels:
    app.kubernetes.io/name: file-processing-web
    app.kubernetes.io/component: storage
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard